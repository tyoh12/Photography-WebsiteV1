/**
 * Simple Photo Gallery
 * Displays all images in a directory without filtering or captions
 */
document.addEventListener('DOMContentLoaded', function() {
    const galleryContainer = document.querySelector('.masonry-grid');
    
    // Exit if gallery container doesn't exist on this page
    if (!galleryContainer) return;
    
    // Get gallery type from path
    const galleryType = getGalleryTypeFromPath();
    
    // Simple configuration for each gallery
    const config = {
        basePath: getBasePath(galleryType),
        imageList: getImageListForGallery(galleryType)
    };
    
    // Generate gallery items
    generateSimpleGalleryItems(config);
    
    // Initialize lightbox
    initializeLightbox();
    
    // Dispatch event indicating gallery is initialized
    document.dispatchEvent(new Event('galleryInitialized'));
});

/**
 * Determine gallery type from current URL path
 */
function getGalleryTypeFromPath() {
    const path = window.location.pathname;
    
    // Check for main gallery types
    if (path.includes('/landscapes')) return 'landscapes';
    if (path.includes('/wildlife')) return 'wildlife';
    if (path.includes('/nature')) return 'nature';
    
    // Check for portrait gallery types
    if (path.includes('/portraits/maternity')) return 'portraits/maternity';
    if (path.includes('/portraits/engagement')) return 'portraits/engagement';
    if (path.includes('/portraits/families')) return 'portraits/families';
    if (path.includes('/portraits/newborns')) return 'portraits/newborns';
    if (path.includes('/portraits/seniors')) return 'portraits/seniors';
    if (path.includes('/portraits/headshots')) return 'portraits/headshots';
    
    // Default fallback
    return 'landscapes';
}

/**
 * Get base path for gallery images based on gallery type
 */
function getBasePath(galleryType) {
    // Handle the different depth levels in the URL structure
    if (galleryType.includes('/')) {
        return '../../assets/images/galleries/' + galleryType + '/';
    } else {
        return '../assets/images/galleries/' + galleryType + '/';
    }
}

/**
 * Get image list based on gallery type
 * This function is auto-generated by the build script
 */
function getImageListForGallery(galleryType) {
    // These arrays are automatically updated by the build script
    const galleryImages = {
        // GALLERY_IMAGES_PLACEHOLDER
    };
    
    return galleryImages[galleryType] || [];
}

/**
 * Generate simple gallery items
 */
function generateSimpleGalleryItems(config) {
    const galleryContainer = document.querySelector('.masonry-grid');
    
    // Clear existing content except loading screen
    const loadingScreen = document.querySelector('.loading-container');
    galleryContainer.innerHTML = '';
    
    // Create gallery items
    if (config.imageList.length === 0) {
        const noImagesMessage = document.createElement('p');
        noImagesMessage.textContent = 'No images found in this gallery.';
        noImagesMessage.style.textAlign = 'center';
        noImagesMessage.style.padding = '2rem';
        galleryContainer.appendChild(noImagesMessage);
    } else {
        config.imageList.forEach(image => {
            // Create gallery item element
            const galleryItem = document.createElement('div');
            galleryItem.className = 'gallery-item';
            
            // Create simple gallery item HTML without categories or captions
            galleryItem.innerHTML = `
                <a href="${config.basePath}${image}" class="lightbox-trigger">
                    <img src="${config.basePath}${image}" alt="Gallery image" loading="lazy"
                         onerror="this.src='../../assets/images/ui/placeholder.jpg'">
                </a>
            `;
            
            // Add to gallery
            galleryContainer.appendChild(galleryItem);
        });
    }
    
    // Hide loading screen if it exists
    if (loadingScreen) {
        loadingScreen.style.display = 'none';
    }
}

/**
 * Initialize simple lightbox functionality
 */
function initializeLightbox() {
    // Ensure lightbox container exists
    let lightbox = document.getElementById('lightbox');
    
    // Create lightbox if it doesn't exist
    if (!lightbox) {
        lightbox = document.createElement('div');
        lightbox.id = 'lightbox';
        lightbox.className = 'lightbox';
        lightbox.innerHTML = `
            <div class="lightbox-content">
                <span class="close-lightbox">&times;</span>
                <img id="lightbox-image" src="" alt="Gallery image in lightbox">
                <div class="lightbox-controls">
                    <button class="lightbox-prev" aria-label="Previous image">&#10094;</button>
                    <button class="lightbox-next" aria-label="Next image">&#10095;</button>
                </div>
            </div>
        `;
        document.body.appendChild(lightbox);
    }
    
    const lightboxImage = document.getElementById('lightbox-image');
    const lightboxClose = document.querySelector('.close-lightbox');
    const lightboxTriggers = document.querySelectorAll('.lightbox-trigger');
    const prevButton = document.querySelector('.lightbox-prev');
    const nextButton = document.querySelector('.lightbox-next');
    
    // Exit if no triggers found
    if (lightboxTriggers.length === 0) return;
    
    let currentIndex = 0;
    const lightboxItems = [];
    
    // Populate lightbox items array with image URLs
    lightboxTriggers.forEach((trigger, index) => {
        const imageUrl = trigger.getAttribute('href');
        
        lightboxItems.push({
            url: imageUrl
        });
        
        trigger.addEventListener('click', function(e) {
            e.preventDefault();
            openLightbox(index);
        });
    });
    
    function openLightbox(index) {
        currentIndex = index;
        updateLightboxContent();
        lightbox.style.display = 'flex';
        document.body.style.overflow = 'hidden'; // Prevent scrolling
    }
    
    function updateLightboxContent() {
        const item = lightboxItems[currentIndex];
        lightboxImage.src = item.url;
        lightboxImage.alt = "Gallery image";
    }
    
    function closeLightbox() {
        lightbox.style.display = 'none';
        document.body.style.overflow = ''; // Restore scrolling
    }
    
    // Add event listeners
    if (lightboxClose) {
        lightboxClose.addEventListener('click', closeLightbox);
    }
    
    lightbox.addEventListener('click', function(e) {
        if (e.target === lightbox) {
            closeLightbox();
        }
    });
    
    if (prevButton) {
        prevButton.addEventListener('click', function() {
            currentIndex = (currentIndex - 1 + lightboxItems.length) % lightboxItems.length;
            updateLightboxContent();
        });
    }
    
    if (nextButton) {
        nextButton.addEventListener('click', function() {
            currentIndex = (currentIndex + 1) % lightboxItems.length;
            updateLightboxContent();
        });
    }
    
    // Keyboard navigation for lightbox
    document.addEventListener('keydown', function(e) {
        if (lightbox.style.display === 'flex') {
            if (e.key === 'Escape') {
                closeLightbox();
            } else if (e.key === 'ArrowLeft') {
                currentIndex = (currentIndex - 1 + lightboxItems.length) % lightboxItems.length;
                updateLightboxContent();
            } else if (e.key === 'ArrowRight') {
                currentIndex = (currentIndex + 1) % lightboxItems.length;
                updateLightboxContent();
            }
        }
    });
}